// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "antevent": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/yinbaoqiang/goadame/design
// --out=$(GOPATH)/src/github.com/yinbaoqiang/goadame
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// EventController is the controller interface for the Event actions.
type EventController interface {
	goa.Muxer
	Post(*PostEventContext) error
	Put(*PutEventContext) error
}

// MountEventController "mounts" a Event resource controller on the given service.
func MountEventController(service *goa.Service, ctrl EventController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewPostEventContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*PostEventPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Post(rctx)
	}
	service.Mux.Handle("POST", "/v1/event", ctrl.MuxHandler("post", h, unmarshalPostEventPayload))
	service.LogInfo("mount", "ctrl", "Event", "action", "Post", "route", "POST /v1/event")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewPutEventContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*PutEventPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Put(rctx)
	}
	service.Mux.Handle("PUT", "/v1/event/:eid", ctrl.MuxHandler("put", h, unmarshalPutEventPayload))
	service.LogInfo("mount", "ctrl", "Event", "action", "Put", "route", "PUT /v1/event/:eid")
}

// unmarshalPostEventPayload unmarshals the request body into the context request data Payload field.
func unmarshalPostEventPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &postEventPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalPutEventPayload unmarshals the request body into the context request data Payload field.
func unmarshalPutEventPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &putEventPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// RegeventController is the controller interface for the Regevent actions.
type RegeventController interface {
	goa.Muxer
	Add(*AddRegeventContext) error
	List(*ListRegeventContext) error
	Remove(*RemoveRegeventContext) error
}

// MountRegeventController "mounts" a Regevent resource controller on the given service.
func MountRegeventController(service *goa.Service, ctrl RegeventController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddRegeventContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AddRegeventPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Add(rctx)
	}
	service.Mux.Handle("POST", "/v1/admin/event/reg", ctrl.MuxHandler("add", h, unmarshalAddRegeventPayload))
	service.LogInfo("mount", "ctrl", "Regevent", "action", "Add", "route", "POST /v1/admin/event/reg")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListRegeventContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	service.Mux.Handle("GET", "/v1/admin/event", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Regevent", "action", "List", "route", "GET /v1/admin/event")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewRemoveRegeventContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Remove(rctx)
	}
	service.Mux.Handle("DELETE", "/v1/admin/event/:rid", ctrl.MuxHandler("remove", h, nil))
	service.LogInfo("mount", "ctrl", "Regevent", "action", "Remove", "route", "DELETE /v1/admin/event/:rid")
}

// unmarshalAddRegeventPayload unmarshals the request body into the context request data Payload field.
func unmarshalAddRegeventPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &addRegeventPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
