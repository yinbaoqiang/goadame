// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "antevent": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/yinbaoqiang/goadame/design
// --out=$(GOPATH)/src/github.com/yinbaoqiang/goadame
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// CreateEventContext provides the event create action context.
type CreateEventContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Action  *string
	Eid     *string
	Etype   *string
	From    *string
	Occtime *string
	Params  *interface{}
}

// NewCreateEventContext parses the incoming request URL and body, performs validations and creates the
// context used by the event controller create action.
func NewCreateEventContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateEventContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateEventContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAction := req.Params["action"]
	if len(paramAction) > 0 {
		rawAction := paramAction[0]
		rctx.Action = &rawAction
	}
	paramEid := req.Params["eid"]
	if len(paramEid) > 0 {
		rawEid := paramEid[0]
		rctx.Eid = &rawEid
	}
	paramEtype := req.Params["etype"]
	if len(paramEtype) > 0 {
		rawEtype := paramEtype[0]
		rctx.Etype = &rawEtype
	}
	paramFrom := req.Params["from"]
	if len(paramFrom) > 0 {
		rawFrom := paramFrom[0]
		rctx.From = &rawFrom
	}
	paramOcctime := req.Params["occtime"]
	if len(paramOcctime) > 0 {
		rawOcctime := paramOcctime[0]
		rctx.Occtime = &rawOcctime
	}
	paramParams := req.Params["params"]
	if len(paramParams) > 0 {
		rawParams := paramParams[0]
		tmp1 := interface{}(rawParams)
		rctx.Params = &tmp1
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateEventContext) OK(r *AntEventCreResult) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.ant.event.cre.result")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateEventContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// Create2EventContext provides the event create2 action context.
type Create2EventContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Action  *string
	Etype   *string
	From    *string
	Occtime *string
	Params  *interface{}
}

// NewCreate2EventContext parses the incoming request URL and body, performs validations and creates the
// context used by the event controller create2 action.
func NewCreate2EventContext(ctx context.Context, r *http.Request, service *goa.Service) (*Create2EventContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := Create2EventContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAction := req.Params["action"]
	if len(paramAction) > 0 {
		rawAction := paramAction[0]
		rctx.Action = &rawAction
	}
	paramEtype := req.Params["etype"]
	if len(paramEtype) > 0 {
		rawEtype := paramEtype[0]
		rctx.Etype = &rawEtype
	}
	paramFrom := req.Params["from"]
	if len(paramFrom) > 0 {
		rawFrom := paramFrom[0]
		rctx.From = &rawFrom
	}
	paramOcctime := req.Params["occtime"]
	if len(paramOcctime) > 0 {
		rawOcctime := paramOcctime[0]
		rctx.Occtime = &rawOcctime
	}
	paramParams := req.Params["params"]
	if len(paramParams) > 0 {
		rawParams := paramParams[0]
		tmp2 := interface{}(rawParams)
		rctx.Params = &tmp2
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *Create2EventContext) OK(r *AntEventCreResult) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.ant.event.cre.result")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *Create2EventContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
