// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "antevent": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/yinbaoqiang/goadame/design
// --out=$(GOPATH)/src/github.com/yinbaoqiang/goadame
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// PostEventContext provides the event post action context.
type PostEventContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *PostEventPayload
}

// NewPostEventContext parses the incoming request URL and body, performs validations and creates the
// context used by the event controller post action.
func NewPostEventContext(ctx context.Context, r *http.Request, service *goa.Service) (*PostEventContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PostEventContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// postEventPayload is the event post action payload.
type postEventPayload struct {
	// 事件行为
	Action *string `form:"action,omitempty" json:"action,omitempty" xml:"action,omitempty"`
	// 事件类型
	Etype *string `form:"etype,omitempty" json:"etype,omitempty" xml:"etype,omitempty"`
	// 产生事件的服务器标识
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
	// 事件发生时间
	Occtime *string `form:"occtime,omitempty" json:"occtime,omitempty" xml:"occtime,omitempty"`
	// 事件发生时间
	Params *interface{} `form:"params,omitempty" json:"params,omitempty" xml:"params,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *postEventPayload) Validate() (err error) {
	if payload.Etype == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "etype"))
	}
	if payload.Action == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "action"))
	}
	if payload.From == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "from"))
	}
	return
}

// Publicize creates PostEventPayload from postEventPayload
func (payload *postEventPayload) Publicize() *PostEventPayload {
	var pub PostEventPayload
	if payload.Action != nil {
		pub.Action = *payload.Action
	}
	if payload.Etype != nil {
		pub.Etype = *payload.Etype
	}
	if payload.From != nil {
		pub.From = *payload.From
	}
	if payload.Occtime != nil {
		pub.Occtime = payload.Occtime
	}
	if payload.Params != nil {
		pub.Params = payload.Params
	}
	return &pub
}

// PostEventPayload is the event post action payload.
type PostEventPayload struct {
	// 事件行为
	Action string `form:"action" json:"action" xml:"action"`
	// 事件类型
	Etype string `form:"etype" json:"etype" xml:"etype"`
	// 产生事件的服务器标识
	From string `form:"from" json:"from" xml:"from"`
	// 事件发生时间
	Occtime *string `form:"occtime,omitempty" json:"occtime,omitempty" xml:"occtime,omitempty"`
	// 事件发生时间
	Params *interface{} `form:"params,omitempty" json:"params,omitempty" xml:"params,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *PostEventPayload) Validate() (err error) {
	if payload.Etype == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "etype"))
	}
	if payload.Action == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "action"))
	}
	if payload.From == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "from"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *PostEventContext) OK(r *AntEventCreResult) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.ant.event.cre.result")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// PutEventContext provides the event put action context.
type PutEventContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Eid     string
	Payload *PutEventPayload
}

// NewPutEventContext parses the incoming request URL and body, performs validations and creates the
// context used by the event controller put action.
func NewPutEventContext(ctx context.Context, r *http.Request, service *goa.Service) (*PutEventContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PutEventContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEid := req.Params["eid"]
	if len(paramEid) > 0 {
		rawEid := paramEid[0]
		rctx.Eid = rawEid
	}
	return &rctx, err
}

// putEventPayload is the event put action payload.
type putEventPayload struct {
	// 事件行为
	Action *string `form:"action,omitempty" json:"action,omitempty" xml:"action,omitempty"`
	// 事件类型
	Etype *string `form:"etype,omitempty" json:"etype,omitempty" xml:"etype,omitempty"`
	// 产生事件的服务器标识
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
	// 事件发生时间
	Occtime *string `form:"occtime,omitempty" json:"occtime,omitempty" xml:"occtime,omitempty"`
	// 事件发生时间
	Params *interface{} `form:"params,omitempty" json:"params,omitempty" xml:"params,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *putEventPayload) Validate() (err error) {
	if payload.Etype == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "etype"))
	}
	if payload.Action == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "action"))
	}
	if payload.From == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "from"))
	}
	return
}

// Publicize creates PutEventPayload from putEventPayload
func (payload *putEventPayload) Publicize() *PutEventPayload {
	var pub PutEventPayload
	if payload.Action != nil {
		pub.Action = *payload.Action
	}
	if payload.Etype != nil {
		pub.Etype = *payload.Etype
	}
	if payload.From != nil {
		pub.From = *payload.From
	}
	if payload.Occtime != nil {
		pub.Occtime = payload.Occtime
	}
	if payload.Params != nil {
		pub.Params = payload.Params
	}
	return &pub
}

// PutEventPayload is the event put action payload.
type PutEventPayload struct {
	// 事件行为
	Action string `form:"action" json:"action" xml:"action"`
	// 事件类型
	Etype string `form:"etype" json:"etype" xml:"etype"`
	// 产生事件的服务器标识
	From string `form:"from" json:"from" xml:"from"`
	// 事件发生时间
	Occtime *string `form:"occtime,omitempty" json:"occtime,omitempty" xml:"occtime,omitempty"`
	// 事件发生时间
	Params *interface{} `form:"params,omitempty" json:"params,omitempty" xml:"params,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *PutEventPayload) Validate() (err error) {
	if payload.Etype == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "etype"))
	}
	if payload.Action == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "action"))
	}
	if payload.From == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "from"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *PutEventContext) OK(r *AntEventCreResult) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.ant.event.cre.result")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *PutEventContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
