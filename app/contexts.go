// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "antevent": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/yinbaoqiang/goadame/design
// --out=$(GOPATH)/src/github.com/yinbaoqiang/goadame
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// BackAnalysisContext provides the analysis back action context.
type BackAnalysisContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Eid string
}

// NewBackAnalysisContext parses the incoming request URL and body, performs validations and creates the
// context used by the analysis controller back action.
func NewBackAnalysisContext(ctx context.Context, r *http.Request, service *goa.Service) (*BackAnalysisContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := BackAnalysisContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEid := req.Params["eid"]
	if len(paramEid) > 0 {
		rawEid := paramEid[0]
		rctx.Eid = rawEid
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *BackAnalysisContext) OK(r AntEvenBackCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "vnd.ant.even.back+json; type=collection")
	if r == nil {
		r = AntEvenBackCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListAnalysisContext provides the analysis list action context.
type ListAnalysisContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Action *string
	Count  *int
	Etype  *string
	From   *string
	Page   *int
}

// NewListAnalysisContext parses the incoming request URL and body, performs validations and creates the
// context used by the analysis controller list action.
func NewListAnalysisContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListAnalysisContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListAnalysisContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAction := req.Params["action"]
	if len(paramAction) > 0 {
		rawAction := paramAction[0]
		rctx.Action = &rawAction
	}
	paramCount := req.Params["count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp2 := count
			tmp1 := &tmp2
			rctx.Count = tmp1
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("count", rawCount, "integer"))
		}
		if rctx.Count != nil {
			if *rctx.Count < 5 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`count`, *rctx.Count, 5, true))
			}
		}
	}
	paramEtype := req.Params["etype"]
	if len(paramEtype) > 0 {
		rawEtype := paramEtype[0]
		rctx.Etype = &rawEtype
	}
	paramFrom := req.Params["from"]
	if len(paramFrom) > 0 {
		rawFrom := paramFrom[0]
		rctx.From = &rawFrom
	}
	paramPage := req.Params["page"]
	if len(paramPage) > 0 {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			tmp4 := page
			tmp3 := &tmp4
			rctx.Page = tmp3
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
		if rctx.Page != nil {
			if *rctx.Page < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`page`, *rctx.Page, 1, true))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListAnalysisContext) OK(r *AntRegList) error {
	ctx.ResponseData.Header().Set("Content-Type", "vnd.ant.reg.list+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// PostEventContext provides the event post action context.
type PostEventContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *PostEventPayload
}

// NewPostEventContext parses the incoming request URL and body, performs validations and creates the
// context used by the event controller post action.
func NewPostEventContext(ctx context.Context, r *http.Request, service *goa.Service) (*PostEventContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PostEventContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// postEventPayload is the event post action payload.
type postEventPayload struct {
	// 事件行为
	Action *string `form:"action,omitempty" json:"action,omitempty" xml:"action,omitempty"`
	// 事件类型
	Etype *string `form:"etype,omitempty" json:"etype,omitempty" xml:"etype,omitempty"`
	// 产生事件的服务器标识
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
	// 事件发生时间
	Occtime *string `form:"occtime,omitempty" json:"occtime,omitempty" xml:"occtime,omitempty"`
	// 事件发生时间
	Params *interface{} `form:"params,omitempty" json:"params,omitempty" xml:"params,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *postEventPayload) Validate() (err error) {
	if payload.Etype == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "etype"))
	}
	if payload.Action == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "action"))
	}
	if payload.From == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "from"))
	}
	return
}

// Publicize creates PostEventPayload from postEventPayload
func (payload *postEventPayload) Publicize() *PostEventPayload {
	var pub PostEventPayload
	if payload.Action != nil {
		pub.Action = *payload.Action
	}
	if payload.Etype != nil {
		pub.Etype = *payload.Etype
	}
	if payload.From != nil {
		pub.From = *payload.From
	}
	if payload.Occtime != nil {
		pub.Occtime = payload.Occtime
	}
	if payload.Params != nil {
		pub.Params = payload.Params
	}
	return &pub
}

// PostEventPayload is the event post action payload.
type PostEventPayload struct {
	// 事件行为
	Action string `form:"action" json:"action" xml:"action"`
	// 事件类型
	Etype string `form:"etype" json:"etype" xml:"etype"`
	// 产生事件的服务器标识
	From string `form:"from" json:"from" xml:"from"`
	// 事件发生时间
	Occtime *string `form:"occtime,omitempty" json:"occtime,omitempty" xml:"occtime,omitempty"`
	// 事件发生时间
	Params *interface{} `form:"params,omitempty" json:"params,omitempty" xml:"params,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *PostEventPayload) Validate() (err error) {
	if payload.Etype == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "etype"))
	}
	if payload.Action == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "action"))
	}
	if payload.From == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "from"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *PostEventContext) OK(r *AntResult) error {
	ctx.ResponseData.Header().Set("Content-Type", "vnd.ant.result+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// PutEventContext provides the event put action context.
type PutEventContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Eid     string
	Payload *PutEventPayload
}

// NewPutEventContext parses the incoming request URL and body, performs validations and creates the
// context used by the event controller put action.
func NewPutEventContext(ctx context.Context, r *http.Request, service *goa.Service) (*PutEventContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PutEventContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEid := req.Params["eid"]
	if len(paramEid) > 0 {
		rawEid := paramEid[0]
		rctx.Eid = rawEid
	}
	return &rctx, err
}

// putEventPayload is the event put action payload.
type putEventPayload struct {
	// 事件行为
	Action *string `form:"action,omitempty" json:"action,omitempty" xml:"action,omitempty"`
	// 事件类型
	Etype *string `form:"etype,omitempty" json:"etype,omitempty" xml:"etype,omitempty"`
	// 产生事件的服务器标识
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
	// 事件发生时间
	Occtime *string `form:"occtime,omitempty" json:"occtime,omitempty" xml:"occtime,omitempty"`
	// 事件发生时间
	Params *interface{} `form:"params,omitempty" json:"params,omitempty" xml:"params,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *putEventPayload) Validate() (err error) {
	if payload.Etype == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "etype"))
	}
	if payload.Action == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "action"))
	}
	if payload.From == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "from"))
	}
	return
}

// Publicize creates PutEventPayload from putEventPayload
func (payload *putEventPayload) Publicize() *PutEventPayload {
	var pub PutEventPayload
	if payload.Action != nil {
		pub.Action = *payload.Action
	}
	if payload.Etype != nil {
		pub.Etype = *payload.Etype
	}
	if payload.From != nil {
		pub.From = *payload.From
	}
	if payload.Occtime != nil {
		pub.Occtime = payload.Occtime
	}
	if payload.Params != nil {
		pub.Params = payload.Params
	}
	return &pub
}

// PutEventPayload is the event put action payload.
type PutEventPayload struct {
	// 事件行为
	Action string `form:"action" json:"action" xml:"action"`
	// 事件类型
	Etype string `form:"etype" json:"etype" xml:"etype"`
	// 产生事件的服务器标识
	From string `form:"from" json:"from" xml:"from"`
	// 事件发生时间
	Occtime *string `form:"occtime,omitempty" json:"occtime,omitempty" xml:"occtime,omitempty"`
	// 事件发生时间
	Params *interface{} `form:"params,omitempty" json:"params,omitempty" xml:"params,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *PutEventPayload) Validate() (err error) {
	if payload.Etype == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "etype"))
	}
	if payload.Action == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "action"))
	}
	if payload.From == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "from"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *PutEventContext) OK(r *AntResult) error {
	ctx.ResponseData.Header().Set("Content-Type", "vnd.ant.result+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *PutEventContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// AddRegeventContext provides the regevent add action context.
type AddRegeventContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddRegeventPayload
}

// NewAddRegeventContext parses the incoming request URL and body, performs validations and creates the
// context used by the regevent controller add action.
func NewAddRegeventContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddRegeventContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddRegeventContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// addRegeventPayload is the regevent add action payload.
type addRegeventPayload struct {
	// 事件行为,不设置该项则注册监听所有行为变化
	Action *string `form:"action,omitempty" json:"action,omitempty" xml:"action,omitempty"`
	// 回调路径
	Bakurl *string `form:"bakurl,omitempty" json:"bakurl,omitempty" xml:"bakurl,omitempty"`
	// 事件类型
	Etype *string `form:"etype,omitempty" json:"etype,omitempty" xml:"etype,omitempty"`
	// 产生事件的服务器标识
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *addRegeventPayload) Validate() (err error) {
	if payload.Etype == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "etype"))
	}
	if payload.Bakurl == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "bakurl"))
	}
	if payload.From == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "from"))
	}
	return
}

// Publicize creates AddRegeventPayload from addRegeventPayload
func (payload *addRegeventPayload) Publicize() *AddRegeventPayload {
	var pub AddRegeventPayload
	if payload.Action != nil {
		pub.Action = payload.Action
	}
	if payload.Bakurl != nil {
		pub.Bakurl = *payload.Bakurl
	}
	if payload.Etype != nil {
		pub.Etype = *payload.Etype
	}
	if payload.From != nil {
		pub.From = *payload.From
	}
	return &pub
}

// AddRegeventPayload is the regevent add action payload.
type AddRegeventPayload struct {
	// 事件行为,不设置该项则注册监听所有行为变化
	Action *string `form:"action,omitempty" json:"action,omitempty" xml:"action,omitempty"`
	// 回调路径
	Bakurl string `form:"bakurl" json:"bakurl" xml:"bakurl"`
	// 事件类型
	Etype string `form:"etype" json:"etype" xml:"etype"`
	// 产生事件的服务器标识
	From string `form:"from" json:"from" xml:"from"`
}

// Validate runs the validation rules defined in the design.
func (payload *AddRegeventPayload) Validate() (err error) {
	if payload.Etype == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "etype"))
	}
	if payload.Bakurl == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "bakurl"))
	}
	if payload.From == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "from"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *AddRegeventContext) OK(r *AntRegResult) error {
	ctx.ResponseData.Header().Set("Content-Type", "vnd.ant.reg.result+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKFailed sends a HTTP response with status code 200.
func (ctx *AddRegeventContext) OKFailed(r *AntRegResultFailed) error {
	ctx.ResponseData.Header().Set("Content-Type", "vnd.ant.reg.result+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ListRegeventContext provides the regevent list action context.
type ListRegeventContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Count *int
	Page  *int
}

// NewListRegeventContext parses the incoming request URL and body, performs validations and creates the
// context used by the regevent controller list action.
func NewListRegeventContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListRegeventContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListRegeventContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCount := req.Params["count"]
	if len(paramCount) > 0 {
		rawCount := paramCount[0]
		if count, err2 := strconv.Atoi(rawCount); err2 == nil {
			tmp6 := count
			tmp5 := &tmp6
			rctx.Count = tmp5
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("count", rawCount, "integer"))
		}
	}
	paramPage := req.Params["page"]
	if len(paramPage) > 0 {
		rawPage := paramPage[0]
		if page, err2 := strconv.Atoi(rawPage); err2 == nil {
			tmp8 := page
			tmp7 := &tmp8
			rctx.Page = tmp7
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page", rawPage, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListRegeventContext) OK(r *AntRegList) error {
	ctx.ResponseData.Header().Set("Content-Type", "vnd.ant.reg.list+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// RemoveRegeventContext provides the regevent remove action context.
type RemoveRegeventContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Rid string
}

// NewRemoveRegeventContext parses the incoming request URL and body, performs validations and creates the
// context used by the regevent controller remove action.
func NewRemoveRegeventContext(ctx context.Context, r *http.Request, service *goa.Service) (*RemoveRegeventContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RemoveRegeventContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramRid := req.Params["rid"]
	if len(paramRid) > 0 {
		rawRid := paramRid[0]
		rctx.Rid = rawRid
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RemoveRegeventContext) OK(r *AntResult) error {
	ctx.ResponseData.Header().Set("Content-Type", "vnd.ant.result+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
