// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "antevent": analysis Resource Client
//
// Command:
// $ goagen
// --design=github.com/yinbaoqiang/goadame/design
// --out=$(GOPATH)/src/github.com/yinbaoqiang/goadame
// --version=v1.2.0-dirty

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// BackAnalysisPath computes a request path to the back action of analysis.
func BackAnalysisPath(eid int) string {
	param0 := strconv.Itoa(eid)

	return fmt.Sprintf("/v1/admin/event/analysis/back/%s", param0)
}

// 事件回调执行情况
func (c *Client) BackAnalysis(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewBackAnalysisRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewBackAnalysisRequest create the request corresponding to the back action endpoint of the analysis resource.
func (c *Client) NewBackAnalysisRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListAnalysisPath computes a request path to the list action of analysis.
func ListAnalysisPath() string {

	return fmt.Sprintf("/v1/admin/event/analysis")
}

// 事件发生历史,可以
func (c *Client) ListAnalysis(ctx context.Context, path string, action *string, count *int, etype *string, from *string, page *int) (*http.Response, error) {
	req, err := c.NewListAnalysisRequest(ctx, path, action, count, etype, from, page)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListAnalysisRequest create the request corresponding to the list action endpoint of the analysis resource.
func (c *Client) NewListAnalysisRequest(ctx context.Context, path string, action *string, count *int, etype *string, from *string, page *int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if action != nil {
		values.Set("action", *action)
	}
	if count != nil {
		tmp8 := strconv.Itoa(*count)
		values.Set("count", tmp8)
	}
	if etype != nil {
		values.Set("etype", *etype)
	}
	if from != nil {
		values.Set("from", *from)
	}
	if page != nil {
		tmp9 := strconv.Itoa(*page)
		values.Set("page", tmp9)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
