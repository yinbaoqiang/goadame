// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "antevent": event Resource Client
//
// Command:
// $ goagen
// --design=github.com/yinbaoqiang/goadame/design
// --out=$(GOPATH)/src/github.com/yinbaoqiang/goadame
// --version=v1.2.0-dirty

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateEventPath computes a request path to the create action of event.
func CreateEventPath() string {

	return fmt.Sprintf("/v1/event")
}

// 创建一个事件
func (c *Client) CreateEvent(ctx context.Context, path string, action *string, eid *string, etype *string, from *string, occtime *string, params *interface{}) (*http.Response, error) {
	req, err := c.NewCreateEventRequest(ctx, path, action, eid, etype, from, occtime, params)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateEventRequest create the request corresponding to the create action endpoint of the event resource.
func (c *Client) NewCreateEventRequest(ctx context.Context, path string, action *string, eid *string, etype *string, from *string, occtime *string, params *interface{}) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if action != nil {
		values.Set("action", *action)
	}
	if eid != nil {
		values.Set("eid", *eid)
	}
	if etype != nil {
		values.Set("etype", *etype)
	}
	if from != nil {
		values.Set("from", *from)
	}
	if occtime != nil {
		values.Set("occtime", *occtime)
	}
	if params != nil {
		tmp5 := fmt.Sprintf("%v", *params)
		values.Set("params", tmp5)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// Create2EventPath computes a request path to the create2 action of event.
func Create2EventPath() string {

	return fmt.Sprintf("/v1/event")
}

// 创建一个事件
func (c *Client) Create2Event(ctx context.Context, path string, action *string, etype *string, from *string, occtime *string, params *interface{}) (*http.Response, error) {
	req, err := c.NewCreate2EventRequest(ctx, path, action, etype, from, occtime, params)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreate2EventRequest create the request corresponding to the create2 action endpoint of the event resource.
func (c *Client) NewCreate2EventRequest(ctx context.Context, path string, action *string, etype *string, from *string, occtime *string, params *interface{}) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if action != nil {
		values.Set("action", *action)
	}
	if etype != nil {
		values.Set("etype", *etype)
	}
	if from != nil {
		values.Set("from", *from)
	}
	if occtime != nil {
		values.Set("occtime", *occtime)
	}
	if params != nil {
		tmp6 := fmt.Sprintf("%v", *params)
		values.Set("params", tmp6)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
