// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "antevent": listen Resource Client
//
// Command:
// $ goagen
// --design=github.com/yinbaoqiang/goadame/design
// --out=$(GOPATH)/src/github.com/yinbaoqiang/goadame
// --version=v1.2.0-dirty

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// AddListenPayload is the listen add action payload.
type AddListenPayload struct {
	// 事件行为,不设置该项则注册监听所有行为变化
	Action *string `form:"action,omitempty" json:"action,omitempty" xml:"action,omitempty"`
	// 事件类型
	Etype string `form:"etype" json:"etype" xml:"etype"`
	// 注册事件监听的服务器标识
	From string `form:"from" json:"from" xml:"from"`
	// 钩子url
	Hookurl string `form:"hookurl" json:"hookurl" xml:"hookurl"`
}

// AddListenPath computes a request path to the add action of listen.
func AddListenPath() string {

	return fmt.Sprintf("/v1/admin/listen")
}

// 注册事件监听
func (c *Client) AddListen(ctx context.Context, path string, payload *AddListenPayload) (*http.Response, error) {
	req, err := c.NewAddListenRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddListenRequest create the request corresponding to the add action endpoint of the listen resource.
func (c *Client) NewAddListenRequest(ctx context.Context, path string, payload *AddListenPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}

// ListListenPath computes a request path to the list action of listen.
func ListListenPath() string {

	return fmt.Sprintf("/v1/admin/listen")
}

// 获取注册事件监听列表
func (c *Client) ListListen(ctx context.Context, path string, action *string, count *int, etype *string, previd *string) (*http.Response, error) {
	req, err := c.NewListListenRequest(ctx, path, action, count, etype, previd)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListListenRequest create the request corresponding to the list action endpoint of the listen resource.
func (c *Client) NewListListenRequest(ctx context.Context, path string, action *string, count *int, etype *string, previd *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if action != nil {
		values.Set("action", *action)
	}
	if count != nil {
		tmp12 := strconv.Itoa(*count)
		values.Set("count", tmp12)
	}
	if etype != nil {
		values.Set("etype", *etype)
	}
	if previd != nil {
		values.Set("previd", *previd)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// RemoveListenPath computes a request path to the remove action of listen.
func RemoveListenPath(rid string) string {
	param0 := rid

	return fmt.Sprintf("/v1/admin/listen/%s", param0)
}

// 取消事件监听
func (c *Client) RemoveListen(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewRemoveListenRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRemoveListenRequest create the request corresponding to the remove action endpoint of the listen resource.
func (c *Client) NewRemoveListenRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateListenPayload is the listen update action payload.
type UpdateListenPayload struct {
	// 事件行为,不设置该项则注册监听所有行为变化
	Action *string `form:"action,omitempty" json:"action,omitempty" xml:"action,omitempty"`
	// 事件类型
	Etype string `form:"etype" json:"etype" xml:"etype"`
	// 产生事件的服务器标识
	From string `form:"from" json:"from" xml:"from"`
	// 钩子url
	Hookurl string `form:"hookurl" json:"hookurl" xml:"hookurl"`
}

// UpdateListenPath computes a request path to the update action of listen.
func UpdateListenPath(rid string) string {
	param0 := rid

	return fmt.Sprintf("/v1/admin/listen/%s", param0)
}

// 修改注册事件监听
func (c *Client) UpdateListen(ctx context.Context, path string, payload *UpdateListenPayload) (*http.Response, error) {
	req, err := c.NewUpdateListenRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateListenRequest create the request corresponding to the update action endpoint of the listen resource.
func (c *Client) NewUpdateListenRequest(ctx context.Context, path string, payload *UpdateListenPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}
