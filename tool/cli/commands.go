// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "antevent": CLI Commands
//
// Command:
// $ goagen
// --design=github.com/yinbaoqiang/goadame/design
// --out=$(GOPATH)/src/github.com/yinbaoqiang/goadame
// --version=v1.2.0-dirty

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/spf13/cobra"
	"github.com/yinbaoqiang/goadame/client"
	"log"
	"net/url"
	"os"
	"path"
	"strconv"
	"strings"
	"time"
)

type (
	// HookAnalysisCommand is the command line data structure for the hook action of analysis
	HookAnalysisCommand struct {
		// 事件事件唯一标识
		Eid string
		// 事件行为,指定该值则只返回该事件该行为的钩子调用情况,不指定,返回该事件所有行为调用情况
		Action      int
		PrettyPrint bool
	}

	// ListAnalysisCommand is the command line data structure for the list action of analysis
	ListAnalysisCommand struct {
		// 行为
		Action string
		// 分页数量
		Count int
		// 事件类型
		Etype string
		// 来源
		From string
		// 查询分页
		Page        int
		PrettyPrint bool
	}

	// PostEventCommand is the command line data structure for the post action of event
	PostEventCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// PutEventCommand is the command line data structure for the put action of event
	PutEventCommand struct {
		Payload     string
		ContentType string
		// 事件唯一标识
		Eid         string
		PrettyPrint bool
	}

	// AddListenCommand is the command line data structure for the add action of listen
	AddListenCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// ListListenCommand is the command line data structure for the list action of listen
	ListListenCommand struct {
		// 事件行为,不设置该项则查询所有行为
		Action string
		// 分页数量
		Count int
		// 事件类型,不设置则查询所有事件类型
		Etype string
		// 上次查询最后id
		Previd      string
		PrettyPrint bool
	}

	// RemoveListenCommand is the command line data structure for the remove action of listen
	RemoveListenCommand struct {
		// 事件监听唯一标识
		Rid         string
		PrettyPrint bool
	}

	// UpdateListenCommand is the command line data structure for the update action of listen
	UpdateListenCommand struct {
		Payload     string
		ContentType string
		Rid         string
		PrettyPrint bool
	}

	// DownloadCommand is the command line data structure for the download command.
	DownloadCommand struct {
		// OutFile is the path to the download output file.
		OutFile string
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "add",
		Short: `注册事件监听`,
	}
	tmp1 := new(AddListenCommand)
	sub = &cobra.Command{
		Use:   `listen ["/v1/admin/listen"]`,
		Short: ``,
		Long: `

Payload example:

{
   "action": "Dolore unde placeat rem tempore dolorum eius.",
   "etype": "Vero et illum ducimus.",
   "from": "Quia perferendis nemo eligendi.",
   "hookurl": "Dorothea Gleichner PhD"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "hook",
		Short: `事件回调执行情况`,
	}
	tmp2 := new(HookAnalysisCommand)
	sub = &cobra.Command{
		Use:   `analysis ["/v1/admin/event/analysis/hook/EID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list",
		Short: `list action`,
	}
	tmp3 := new(ListAnalysisCommand)
	sub = &cobra.Command{
		Use:   `analysis ["/v1/admin/event/analysis"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp4 := new(ListListenCommand)
	sub = &cobra.Command{
		Use:   `listen ["/v1/admin/listen"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "post",
		Short: `创建一个事件`,
	}
	tmp5 := new(PostEventCommand)
	sub = &cobra.Command{
		Use:   `event ["/v1/event"]`,
		Short: ``,
		Long: `

Payload example:

{
   "action": "Quam ut.",
   "etype": "Optio dicta molestias.",
   "from": "Ut non et.",
   "occtime": "1980-08-20T13:58:33+08:00",
   "params": false
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp5.Run(c, args) },
	}
	tmp5.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp5.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "put",
		Short: `创建一个事件`,
	}
	tmp6 := new(PutEventCommand)
	sub = &cobra.Command{
		Use:   `event ["/v1/event/EID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "action": "Consequatur ea dolores temporibus dolorem quis.",
   "etype": "Perferendis saepe neque qui id tenetur ea.",
   "from": "Eum commodi molestiae est.",
   "occtime": "1994-12-09T08:49:58+08:00",
   "params": "1de9e26c-2a50-4fdc-ac8d-81ec0e438e1f"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp6.Run(c, args) },
	}
	tmp6.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp6.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "remove",
		Short: `取消事件监听`,
	}
	tmp7 := new(RemoveListenCommand)
	sub = &cobra.Command{
		Use:   `listen ["/v1/admin/listen/RID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp7.Run(c, args) },
	}
	tmp7.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp7.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update",
		Short: `修改注册事件监听`,
	}
	tmp8 := new(UpdateListenCommand)
	sub = &cobra.Command{
		Use:   `listen ["/v1/admin/listen/RID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "action": "Labore ut.",
   "etype": "Modi et inventore rem ut.",
   "from": "Sunt enim.",
   "hookurl": "Eaque odio officiis rerum eos delectus."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp8.Run(c, args) },
	}
	tmp8.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp8.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)

	dl := new(DownloadCommand)
	dlc := &cobra.Command{
		Use:   "download [PATH]",
		Short: "Download file with given path",
		RunE: func(cmd *cobra.Command, args []string) error {
			return dl.Run(c, args)
		},
	}
	dlc.Flags().StringVar(&dl.OutFile, "out", "", "Output file")
	app.AddCommand(dlc)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run downloads files with given paths.
func (cmd *DownloadCommand) Run(c *client.Client, args []string) error {
	var (
		fnf func(context.Context, string) (int64, error)
		fnd func(context.Context, string, string) (int64, error)

		rpath   = args[0]
		outfile = cmd.OutFile
		logger  = goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
		ctx     = goa.WithLogger(context.Background(), logger)
		err     error
	)

	if rpath[0] != '/' {
		rpath = "/" + rpath
	}
	if rpath == "/swagger.json" {
		fnf = c.DownloadSwaggerJSON
		if outfile == "" {
			outfile = "swagger.json"
		}
		goto found
	}
	if strings.HasPrefix(rpath, "/ui/") {
		fnd = c.DownloadUI
		rpath = rpath[4:]
		if outfile == "" {
			_, outfile = path.Split(rpath)
		}
		goto found
	}
	return fmt.Errorf("don't know how to download %s", rpath)
found:
	ctx = goa.WithLogContext(ctx, "file", outfile)
	if fnf != nil {
		_, err = fnf(ctx, outfile)
	} else {
		_, err = fnd(ctx, rpath, outfile)
	}
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	return nil
}

// Run makes the HTTP request corresponding to the HookAnalysisCommand command.
func (cmd *HookAnalysisCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/v1/admin/event/analysis/hook/%v", url.QueryEscape(cmd.Eid))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.HookAnalysis(ctx, path, intFlagVal("action", cmd.Action))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *HookAnalysisCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var eid string
	cc.Flags().StringVar(&cmd.Eid, "eid", eid, `事件事件唯一标识`)
	var action int
	cc.Flags().IntVar(&cmd.Action, "action", action, `事件行为,指定该值则只返回该事件该行为的钩子调用情况,不指定,返回该事件所有行为调用情况`)
}

// Run makes the HTTP request corresponding to the ListAnalysisCommand command.
func (cmd *ListAnalysisCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/v1/admin/event/analysis"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListAnalysis(ctx, path, stringFlagVal("action", cmd.Action), intFlagVal("count", cmd.Count), stringFlagVal("etype", cmd.Etype), stringFlagVal("from", cmd.From), intFlagVal("page", cmd.Page))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListAnalysisCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var action string
	cc.Flags().StringVar(&cmd.Action, "action", action, `行为`)
	var count int
	cc.Flags().IntVar(&cmd.Count, "count", count, `分页数量`)
	var etype string
	cc.Flags().StringVar(&cmd.Etype, "etype", etype, `事件类型`)
	var from string
	cc.Flags().StringVar(&cmd.From, "from", from, `来源`)
	var page int
	cc.Flags().IntVar(&cmd.Page, "page", page, `查询分页`)
}

// Run makes the HTTP request corresponding to the PostEventCommand command.
func (cmd *PostEventCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/v1/event"
	}
	var payload client.PostEventPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.PostEvent(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *PostEventCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the PutEventCommand command.
func (cmd *PutEventCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/v1/event/%v", url.QueryEscape(cmd.Eid))
	}
	var payload client.PutEventPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.PutEvent(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *PutEventCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var eid string
	cc.Flags().StringVar(&cmd.Eid, "eid", eid, `事件唯一标识`)
}

// Run makes the HTTP request corresponding to the AddListenCommand command.
func (cmd *AddListenCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/v1/admin/listen"
	}
	var payload client.AddListenPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddListen(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddListenCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the ListListenCommand command.
func (cmd *ListListenCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/v1/admin/listen"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListListen(ctx, path, stringFlagVal("action", cmd.Action), intFlagVal("count", cmd.Count), stringFlagVal("etype", cmd.Etype), stringFlagVal("previd", cmd.Previd))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListListenCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var action string
	cc.Flags().StringVar(&cmd.Action, "action", action, `事件行为,不设置该项则查询所有行为`)
	var count int
	cc.Flags().IntVar(&cmd.Count, "count", count, `分页数量`)
	var etype string
	cc.Flags().StringVar(&cmd.Etype, "etype", etype, `事件类型,不设置则查询所有事件类型`)
	var previd string
	cc.Flags().StringVar(&cmd.Previd, "previd", previd, `上次查询最后id`)
}

// Run makes the HTTP request corresponding to the RemoveListenCommand command.
func (cmd *RemoveListenCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/v1/admin/listen/%v", url.QueryEscape(cmd.Rid))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.RemoveListen(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *RemoveListenCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var rid string
	cc.Flags().StringVar(&cmd.Rid, "rid", rid, `事件监听唯一标识`)
}

// Run makes the HTTP request corresponding to the UpdateListenCommand command.
func (cmd *UpdateListenCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/v1/admin/listen/%v", url.QueryEscape(cmd.Rid))
	}
	var payload client.UpdateListenPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateListen(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateListenCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var rid string
	cc.Flags().StringVar(&cmd.Rid, "rid", rid, ``)
}
